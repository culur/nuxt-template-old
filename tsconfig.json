{
    "compilerOptions": {
        //! Project Options
        //* Basic Options
        "target": "ES2018", //                          Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.
        "module": "ESNext", //                          Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.
        "lib": [
            //                                          Specify library files to be included in the compilation.
            "ESNext",
            "ESNext.AsyncIterable",
            "DOM"
        ],

        //* JavaScript
        "allowJs": false, //                            Allow javascript files to be compiled.
        "checkJs": false, //                            Report errors in .js files.

        //! Strict Checks
        // "alwaysStrict": true, //                     Parse in strict mode and emit "use strict" for each source file.
        "strict": true, //                              Enable all strict type-checking options.
        // "strictNullChecks": true, //                 Enable strict null checks.
        // "strictFunctionTypes": true, //              Enable strict checking of function types.
        // "strictBindCallApply": true, //              Enable strict 'bind', 'call', and 'apply' methods on functions.
        // "strictPropertyInitialization": true, //     Enable strict checking of property initialization in classes.

        //! Linter Checks
        // "noFallthroughCasesInSwitch": false, //      Report errors for fallthrough cases in switch statement.
        // "noImplicitReturns": false, //               Report error when not all code paths in function return a value.
        // "noUnusedLocals": false, //                  Report errors on unused locals.
        // "noUnusedParameters": false, //              Report errors on unused parameters.
        "noImplicitAny": false, //                      Raise error on expressions and declarations with an implied 'any' type.
        // "noImplicitThis": true, //                   Raise error on 'this' expressions with an implied 'any' type.

        //! Source Maps
        "sourceMap": true, //                           Generates corresponding '.map' file.
        // "inlineSourceMap": true, //                  Emit a single file with source maps instead of having a separate file.
        // "inlineSources": true, //                    Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.

        //! Module Resolution Options
        "esModuleInterop": true, //                     Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
        // "preserveSymlinks": true, //                 Do not resolve the real path of symlinks.
        "moduleResolution": "node", //                  Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
        "baseUrl": ".", //                              Base directory to resolve non-absolute module names.
        "paths": {
            "~/*": ["./*"]
        }, //                                           A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.
        "types": [
            //
            "@types/node",
            "@nuxt/types"
        ],

        //* Source Map Options
        // "sourceRoot": "", //                         Specify the location where debugger should locate TypeScript files instead of source locations.
        // "mapRoot": "", //                            Specify the location where debugger should locate map files instead of generated locations.
        // "inlineSourceMap": true, //                  Emit a single file with source maps instead of having a separate file.
        // "inlineSources": true, //                    Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.

        //! Other options
        "resolveJsonModule": true //                    Include modules imported with .json extension.
    },
    "exclude": ["node_modules"]
}
